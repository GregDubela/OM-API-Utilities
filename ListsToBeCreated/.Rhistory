<- c(a1,a2,a3)
a
a = c(1,2,3)
a
b = c(b1,b2,b3)
b = c(5,6,6)
ls <- list(a,b)
ls
dfrm(as.data.frame(ls))
dfrm <- (as.data.frame(ls))
dfrm
print(dfrm)
print(ls)
class(a)
class(pp)
class(path)
class(datafiles)
class(dfrm)
data()
data(volcano)
class(volcano)
volcano
head(volcano)
plot(volcano)
mydata <- data.frame(age=numeric(0), gender=character(0), weight=numeric(0))
mydata <- edit(mydata)
a <- readline("What? :")
3
a
a <- readline("What? :")
6
a
a <- readline("What? :")
wersdf
a
ws
ws()
ls()
wd()
wd
3
3
?int
?as.int
help(int)
??int
3
ram
??cat
help(cat)
tes
test
?str
library(utils0
library(utils)
library(utils)
ws
ws()
getwd()
ls
ls()
summary
summary(a)
summary(b)
summary(mydata)
summary(i)
str(a)
str(i)
str(mydata)
data(mtcats)
data(mtcars)
names(mtcars)
str(mtcars)
class(mtcars)
mtcars$vs
mtcars[['wt']
mtcars[['wt']]
mtcars[['wt']
a
mtcars[['wt']]
mtcars[[,2]]
mtcars[,2]
mtcars[colnames]
mpg
attach(mtcars)
mpg
ls
ls()
table(cyl)
barplot(cyl)
barplot(table(cyl))
help(mtcars)
stem(mpg)
?stem
stem(mpg, scale=3))
stem(mpg, scale=3)
stem(mpg, scale=5)
stem(mpg, scale=5)
mpg[cyl]
mpg[cyl==6]
mean(mpg[cyl ==8])
plot(cyl,mpg)
simple.lm
simple.lm(cyl,mpg)
load(simple0
load(simple0
load(simple0
load(simple0
simple.lm(cyl,mpg)
library(simple)
attach(simple)
lm(cyl~mpg)
reg <- lm(cyl~mpg)
reg
coeff(reg)
var(reg)
class(reg)
str(reg)
?coef
tapply(mpg,cyl,mean)
tapply(mpg,cyl,sum)
tapply(mpg,cyl,lm)
tapply(mpg,cyl,prod)
?tapply
tapply(mpg)
tapply(mpg,all)
tapply(mpg,1..4)
tapply(mpg,size)
mpg
tapply(mpg,cyl)
tapply(mpg,cyl,cov)
ls
ls()
plot(reg)
cor(reg)
detach()
q()
training = read.csv("training1000.csv", header=TRUE, comment.char = "", colClasses = c('integer','integer','integer','integer','NULL','NULL','integer','integer','NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL'))
training = read.csv("training10000.csv", header=TRUE, comment.char = "", colClasses = c('integer','integer','integer','integer','NULL','NULL','integer','integer','NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL'))
head(training)
training
nrow(training)
logit(0.5)
cbd
cbd(10)
cbd(0.5,0,5)
cbd(0.5,0.5)
cdb
summary(training)
cbd
cbd
rm cbd
rm
rm(cdb)
cbd <-  function(y,e) {
-1*(y*(log10(e))+(1-y)*log10(1-e))
}
cbd(1,0.5)
cbd(0,0.5)
cbd(0.5,0.5)
cbd(1,0.6)
cbd(1,0.4)
cbd(0.5,0.4)
outcome = (1,1,0,0)
outcome = {1,1,0,0}
outcome <- {1,1,0,0}
outcome <- (1,1,0,0)
cbd(1, seq(0,1,length=6))
outcome <- c(1,1,0,0)
cbd(outcome, 0.5)
cbd(outcome, outcome)
cbd(outcome, (0.99,0.99,0.99,0.99)
cbd(outcome, (0.99,0.99,0.99,0.99))
cbd(outcome, c(0.99,0.99,0.99,0.99))
fix(cbd)
guess = c(0.5,0.2,0.3)
cbd(outcome, guess)
guess + 0.5
cat(guess,0.3)
guess <- guess,0.3
guess <- c(guess,0.3)
guess
cbd(outcome,guess)
cbda <-  cbd(outcome,guess)
mean (cbda)
cbind(outcome, guess)
out.df <- cbind(outcome, guess)
out.df
class(out.df)
o2 <- dataframe()
o2 <- data.frame()
o2 <- data.frame(outcome, guess)
o2
class(o2)
class(out.df)
class(outcome)
new <- c(1,2,3,4)
o2$new <- new
o2
objects
objects()
rm(cdb)
cbd
cbd(outcome, result)
cbd(outcome, guess)
cbda(outcome, guess)
cbdavg(outcome, guess)
cbdavg(outcome, guess)
a <- c(1,1,0,0)
a <- (a-0.01)[a==1]
a
help(apply)
a <- c(1,1,0,0)
apply(a,[a==1],0.99)
b <- apply(a,1,function (x) {if x==1 0.99 else x}
b <- apply(a,1,function (x) {if x==1 0.99 else x})
b <- apply(a,1,function (x) {if (x==1) 0.99 else x})
b <- apply(a,1,function (x) {if (x==1) x-0.01 else x})
b <- apply(a,a,function (x) {if (x==1) x-0.01 else x})
a
v
b
a[a>0.99] <- 0.99
a
cbdavg(c(1,0,1,0), c(1,1,1,1))
cbdavg(c(1,0,1,0), c(1,0,1,1))
cbdavg(c(1,0,1,0), c(1,0,1,0))
cbdavg(c(1,0,1,0), c(0,1,0,1))
nrow(training)
summary(training)
ncol(training)
training[1]
training[1,1]
training[1,]
rm(ls())
rm(training)
v.test[1,]
summary(v.test$correct)
sum(v.test[v.test$correct ==1])
sum(v.test$correct[v.test$correct ==1])
sum(v.test$correct[v.test$correct ==0])
count(v.test$correct[v.test$correct ==0])
len(v.test$correct[v.test$correct ==0])
length(v.test$correct[v.test$correct ==0])
length(v.test$correct[v.test$correct ==1])
length(test)
nrow(test)
nrow(v.test)
test[1,]
attach(test)
summary(question_id)
v.test[1,]
length(v.test)
nrow(v.test)
v.test.pred <- rep(0.5)
rep
help(rep)
v.test.pred <- rep(0.5,80075)
summary(v.test.pred)
length(v.test.pred)
cbdavg(v.test$correct, v.test.pred)
v.test.pred <- rep(1,80075)
cbdavg(v.test$correct, v.test.pred)
v.test.pred <- rep(0,80075)
cbdavg(v.test$correct, v.test.pred)
v.test.pred <- rep(0.6,80075)
cbdavg(v.test$correct, v.test.pred)
install.packages(c("ggplot2", "plyr", "reshape2", "stringr", "lubridate"))
library(ggplot2)
qplot(mpg,wt,data=mtcars)
getwd()
library(ggplot2)
?mpg
head(mpg)
str()
str(mpg)
summary(mpg)
qplo(displ,hwy,data=mpg)
qplot(displ,hwy,data=mpg)
qplot(displ,hwy,colour=class,data=mpg)
qplot(displ,hwy,colour=fl,data=mpg)
qplot(displ,hwy,colour=displ,data=mpg)
qplot(displ,hwy,colour=displ+fl,data=mpg)
qplot(displ,hwy,colour=trans,data=mpg)
qplot(displ,hwy,colour=trans,size=fl,data=mpg)
qplot(displ,hwy,colour=trans,size=fl,shape=drv,data=mpg)
qplot(displ, hwy, data = mpg) +
facet_grid(. ~ cyl)
qplot(displ, hwy, data = mpg) +
facet_grid(drv ~ cyl)
qplot(displ, hwy, data = mpg) + facet_wrap(~class)
qplot(cty, hwy, data = mpg)
qplot(class, hwy, data = mpg)
qplot(class, hwy, data = mpg)
qplot(reorder(class, hwy), hwy, data = mpg,
geom = c("jitter", "boxplot"))
?reorder
?diamonds
str(diamonds)
summary(diamonds)
qplot(cut,data=diamonds)
?qplot
qplot(carat,data=diamonds)
qplot(carat,data=diamonds,binwidth=1)
qplot(carat,data=diamonds,binwidth=.1)
qplot(carat,data=diamonds,binwidth=.01)
resolution(diamonds$carat)
qplot(carat,data=diamonds,binwidth=.01)+xlim(0,3)
qplot(depth,data=diamonds,binwidth=.02)
qplot(depth,data=diamonds,binwidth=.02,fill=cut)+xlim(55,70)
qplot(depth, data = diamonds, binwidth = 0.562)58 +60 62 64 66 68 70
xlim(55, 70) + facet_wrap(~ cut)
qplot(depth, data = diamonds, binwidth = 0.2)
+ xlim(55, 70) + facet_wrap(~ cut)
qplot(depth, data = diamonds, binwidth = 0.2) + xlim(55,70)
qplot(depth, data = diamonds, binwidth = 0.2) + xlim(55,70)+facet_wrap(~cut)
qplot(price,data=diamonds)
qplot(price,data=diamonds,binwidth=40)
qplot(price,data=diamonds,binwidth=100)
qplot(price,data=diamonds,binwidth=1000)
qplot(price,color=color,data=diamonds,binwidth=1000)
qplot(price,color=cut,data=diamonds,binwidth=1000)
qplot(price,fill=cut,data=diamonds,binwidth=1000)
qplot(price,data=diamonds,binwidth=1000)+fill=cut
qplot(price, data = diamonds, binwidth = 500) + facet_wrap(~ cut)
qplot(price, ..density.., data = diamonds, binwidth = 500,
geom = "freqpoly", colour = cut)
Thursday, June
qplot(price, ..density.., data = diamonds, binwidth = 500,
geom = "freqpoly", colour = cut)
savehistory("~/My Documents/Personal/R Stats/Source code Graphics/hadley workshop history.Rhistory")
?sample
x <- c(Blue,Blue,Blue,Blue,Red,Red,Red)
x <- c("Blue","Blue","Blue","Blue","red","red","red")
ballbin <- c("Blue","Blue","Blue","Blue","red","red","red")
sample(ballbin)
sample(ballbin,size=1)
sample(ballbin,size=1,replace=True)
sample(ballbin,size=1,replace=TRUE)
sample(ballbin,size=1,replace=TRUE)
sample(ballbin,size=1,replace=TRUE)
sample(ballbin,size=1,replace=TRUE)
sample(ballbin,size=1,replace=TRUE)
sample(ballbin,size=1,replace=TRUE)
sample(ballbin,size=2,replace=TRUE)
sample(ballbin,size=2,replace=TRUE)
sample(ballbin,size=2,replace=TRUE)
sample(ballbin,size=2,replace=TRUE)
sample(ballbin,size=2,replace=TRUE)
sample(ballbin,size=2,replace=TRUE)
sample(ballbin,size=2,replace=TRUE)
sample(ballbin,size=2,replace=TRUE)
sample(ballbin,size=2,replace=TRUE)
sample(ballbin,size=2,replace=TRUE)
prob -> rep(1/7)
?rep
rep(7,1/7)
rep(7,1/7)
rep(1:7,1/7)
prob <- rep(7,1/7)
prob
prob <- rep(1:7,1/7)
prob
prob <- c(1/7,1/7,1/7,1/7,1/7,1/7,1/7)
sample(ballbin,size=2,replace=TRUE,prob=prob)
sample(ballbin,size=2,replace=TRUE,prob=prob)
sample(ballbin,size=2,replace=TRUE,prob=prob)
sample(ballbin,size=2,replace=TRUE,prob=prob)
sample(ballbin,size=2,replace=TRUE,prob=prob)
sample(ballbin,size=2,replace=TRUE,prob=prob)
sample(ballbin,size=2,replace=TRUE,prob=prob)
prob <- c(0.1,0.9)
sample(ballbin,size=2,replace=TRUE,prob=prob)
sample(ballbin,size=2,replace=TRUE,prob=prob)
rattle()
library(datasets)
cars
rattle()
library(rattle)
rattle()
exit
head(movies)
?movies
unique(movies$year)
max(unique(movies$year))
which(max(unique(movies$year)))
?which
which(unique(movies$year)==2005)
head(movies)
columns(movies)
column(movies)
movies[1,]
movies[1,3]
movies[1,6]
movies[1,7]
movies[1,7:17]
movies[1,7:16]
sum(movies[1,7:16])
sum(movies[2,7:16])
sum(movies[3,7:16])
sum(movies[4,7:16])
sum(movies[5,7:16])
sum(movies[6,7:16])
sum(movies[7,7:16])
sum(movies[8,7:16])
sum(movies[9,7:16])
sum(movies[1111,7:16])
movies[1,]
movies[1,5]
movies[1,17]
movies[1,7:17]
movies[1,7:16]
sum(movies[1,7:16])
sum(movies[1:100,7:16])
movies$title[movies$year==2005]
movies$title[movies$year==1996]
movies[moves$title=="The Godfather"]
movies[movies$title=="The Godfather"]
movies[movies$title=="Godfather"]
movies$title=="Godfather"
?qplot
qplot(movies$year)
myear<-movies$year
qplot(myear)
qplot(myear, binwidth=10)
qplot(myear, binwidth=20)
qplot(myear, binwidth=5)
qplot(myear, binwidth=1) #by each year
qplot(myear, binwidth=5, color=movies$rating) #by half-decades
?qplot
names(movies)
ratings<-movies$rating
qplot(myear, binwidth=5, color=ratings) #by half-decades
qplot(myear, binwidth=5, color=year) #by half-decades
qplot(data=movies,myear, binwidth=5, color=year) #by half-decades
qplot(data=movies,myear, binwidth=5, color=mpaa) #by half-decades
qplot(data=movies,myear, binwidth=5, color=mpaa) #by half-decades
qplot(data=movies,myear, binwidth=5, fill=mpaa) #by half-decades
qplot(myear, data = movies, binwidth = 5, geom = "freqpoly", fill = mpaa)
?geom
?qplot
qplot(myear, ..density..,data = movies, binwidth = 5, geom = "freqpoly", fill = mpaa)
qplot(myear, ..density..,data = movies, binwidth = 5, geom = "freqpoly", color = mpaa)
library("randomForest")
?randomforest
??randomforest
?randomForest
?movies
names(movies)
)
names(iris)
set.seed(17)
iris.urf <- randomForest(iris[, -5])
MDSplot(iris.urf, iris$Species)
runif()
runif(1)
int(runif(1,1,205))
as.integer(runif(1,1,205))
as.integer(runif(1,1,205))
set.seed(2012)
as.integer(runif(1,1,239))
set.seed(2012)
as.integer(runif(1,1,239))
set.seed(2012)
as.integer(runif(1,1,239))
set.seed(2012)
as.integer(runif(1,min=1,239))
set.seed(2012)
as.integer(runif(1,min=1,max=239))
strsplit(clueid,'\\"clue_')
source('~/My Documents/Personal/R Stats/Source code Text/text_manipulation.R')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
fix(sol)
source('~/.active-rstudio-document')
fix(sol)
fix(row)
source('~/.active-rstudio-document')
fix(sol)
source('~/.active-rstudio-document')
rows<-str_replace(rows,"^.*_response[/]?&quot;", "")  #snipped off initial junk
fix(sol)
fix(sol)
source('~/.active-rstudio-document')
fix(sol)
fix(sol)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
fix(sol)
source('~/.active-rstudio-document')
fix(sol)
source('~/.active-rstudio-document')
fix(sol)
fix(sol)
source('~/.active-rstudio-document')
fix(sol)
source('~/.active-rstudio-document')
fix(sol)
source('~/.active-rstudio-document')
fix(sol)
source('~/.active-rstudio-document')
fix(sol)
?str_extract
rows<-str_sub(rows,5,-5)  #end for quoted response </i>
source('~/.active-rstudio-document')
fix(sol)
source('~/.active-rstudio-document')
fix(sol)
source('~/.active-rstudio-document')
fix(sol)
fix(quest)
fix(quest)
